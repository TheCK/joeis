package irvine.math.r;

import static irvine.TestUtils.assertEqualsLocal;
import static irvine.math.r.TrigonometricIntegral.chi;
import static irvine.math.r.TrigonometricIntegral.ci;
import static irvine.math.r.TrigonometricIntegral.shi;
import static irvine.math.r.TrigonometricIntegral.si;
import junit.framework.TestCase;

/**
 * Tests the corresponding class.
 *
 * @author Sean A. Irvine
 */
public class TrigonometricIntegralTest extends TestCase {

  private static final double FP = 1.0E-13;

  public void testSi() {
    assertEqualsLocal(Double.NaN, si(Double.NaN), 0.0);
    assertEqualsLocal(0.0, si(0.0), 0.0);
    assertEqualsLocal(Constants.HALF_PI, si(Double.POSITIVE_INFINITY), 1.0E-20);
    assertEquals(0.099944461108276950160592118490, si(0.1), FP);
    assertEquals(0.199556088526233821400456944625, si(0.2), FP);
    assertEquals(0.298504043807043161386446229034, si(0.3), FP);
    assertEquals(0.396461464751372883020334262452, si(0.4), FP);
    assertEquals(0.493107418043066689161626706709, si(0.5), FP);
    assertEquals(0.58812880960808006689964790294, si(0.6), FP);
    assertEquals(0.68122223911661131088950681025, si(0.7), FP);
    assertEquals(0.77209578548199656025388971117, si(0.8), FP);
    assertEquals(0.86047071074529293277408540699, si(0.9), FP);
    assertEquals(0.94608307036718301494135330887, si(1.0), FP);
    assertEquals(1.0286852186737335220317316609189, si(1.1), FP);
    assertEquals(1.108047199013718590042783166441, si(1.2), FP);
    assertEquals(1.183958009076062918802103039585, si(1.3), FP);
    assertEquals(1.256226732779217943175975110625, si(1.4), FP);
    assertEquals(1.324683531172119680370472840562, si(1.5), FP);
    assertEquals(1.389180485870438428069328866374, si(1.6), FP);
    assertEquals(1.449592289683321133482868149182, si(1.7), FP);
    assertEquals(1.50581678025557857163050726028, si(1.8), FP);
    assertEquals(1.55777531374881852015238304955, si(1.9), FP);
    assertEquals(1.60541297680269484857672014205, si(2.0), FP);
    assertEquals(1.64869863624441878020213864121, si(2.1), FP);
    assertEquals(1.68762482724109852037388246573, si(2.2), FP);
    assertEquals(1.72220748180550339232926764850, si(2.3), FP);
    assertEquals(1.75248550076176738606136166155, si(2.4), FP);
    assertEquals(1.77852017344382664210031197554, si(2.5), FP);
    assertEquals(1.82194811564950354126981148541, si(3.6), FP);
    assertEquals(1.80862168087845376959761812801, si(3.7), FP);
    assertEquals(1.79339035484957017070971671985, si(3.8), FP);
    assertEquals(1.77650136044780543871638657807, si(3.9), FP);
    assertEquals(1.75820313894905305810555933164, si(4.0), FP);
    assertEquals(1.73874362649176892577702841967, si(4.1), FP);
    assertEquals(1.71836856369086859855436023402, si(4.2), FP);
    assertEquals(1.69731985068246846140824642927, si(4.3), FP);
    assertEquals(1.67583395940837416102118072960, si(4.4), FP);
    assertEquals(1.65414041437924398350392250547, si(4.5), FP);
    assertEquals(1.63246035250034989024715903844, si(4.6), FP);
    assertEquals(1.61100517180978138082926635840, si(4.7), FP);
    assertEquals(1.446197528508234602526042614752, si(5.7), FP);
    assertEquals(1.437359182281820432216915676898, si(5.8), FP);
    assertEquals(1.430184334109366195671030454916, si(5.9), FP);
    assertEquals(1.437868416091684784322259774335, si(6.8), FP);
    assertEquals(1.445702442722501157249210119825, si(6.9), FP);
    assertEquals(1.454596614248093590614768490961, si(7.0), FP);
    assertEquals(1.464433244057341039982187368773, si(7.1), FP);
    assertEquals(1.475089055447246115302351761443, si(7.2), FP);
    assertEquals(1.486436445063168035891587099148, si(7.3), FP);
    assertEquals(1.498344753306055537726771159998, si(7.4), FP);
    assertEquals(1.51068153094338587819732766548, si(7.5), FP);
    assertEquals(1.52331379135525824617230459045, si(7.6), FP);
    assertEquals(1.53610923812865960988769511300, si(7.7), FP);
    assertEquals(1.54893745807799574933417742500, si(7.8), FP);
    assertEquals(1.67204944799401582742557574408, si(9.2), FP);
    assertEquals(1.67392952831613479815019587608, si(9.3), FP);
    assertEquals(1.67472917253259499813135734587, si(9.4), FP);
    assertEquals(1.67446334228143309107142518428, si(9.5), FP);
    assertEquals(1.67315698010544477287384227014, si(9.6), FP);
    assertEquals(1.67084456972736341036596196118, si(9.7), FP);
    assertEquals(1.66756961685138672339195691781, si(9.8), FP);
    assertEquals(1.66338405659586469770709551338, si(9.9), FP);
    assertEquals(1.56041574516491065077309966150, si(11.2), FP);
    assertEquals(1.55181636915143492760443524549, si(11.3), FP);
    assertEquals(1.54355657383878587340665078044, si(11.4), FP);
    assertEquals(1.53571223698215152499136622501, si(11.5), FP);
    assertEquals(1.52835386475750190353507721732, si(11.6), FP);
    assertEquals(1.52154600649708021516480932706, si(11.7), FP);
    assertEquals(1.51534673535642742955613094382, si(11.8), FP);
    assertEquals(1.50980719872892765460854852281, si(11.9), FP);
    assertEquals(1.50497124152637337052714857726, si(12.0), FP);
    assertEquals(1.50087510472726722097855110990, si(12.1), FP);
    assertEquals(1.497547200865237665195599170034, si(12.2), FP);
    assertEquals(1.495007967394828548421619783025, si(12.3), FP);
    assertEquals(1.493269798137787115019549216794, si(12.4), FP);
    assertEquals(1.492337052286500034340221829690, si(12.5), FP);
    assertEquals(1.492206139728950967150558906950, si(12.6), FP);
    assertEquals(1.492865680767835832718572351711, si(12.7), FP);
    assertEquals(1.494296737641358704716368796413, si(12.8), FP);
    assertEquals(1.496473114620520392679003781186, si(12.9), FP);
    assertEquals(1.499361722862824564227606786278, si(13.0), FP);
    assertEquals(1.50292300565028112972477486164, si(13.1), FP);
    assertEquals(1.50711141913495710966221721155, si(13.2), FP);
    assertEquals(1.59072286207089225980698735177, si(14.5), FP);
    assertEquals(1.59701587115814682895496245239, si(14.6), FP);
    assertEquals(1.60296144272949570314990680696, si(14.7), FP);
    assertEquals(1.60850528397130654617397217208, si(14.8), FP);
    assertEquals(1.61359778582030281911992891998, si(14.9), FP);
    assertEquals(1.61819444370836873912398859393, si(15.0), FP);
    assertEquals(1.55161707248593589472798565385, si(50.0), FP);
    assertEquals(1.56222546688905629335234524282, si(100.0), FP);
    assertEquals(1.57256588224316870353434170720, si(500.0), FP);
    assertEquals(1.57023312196877121814796166467, si(1000.0), FP);
    assertEquals(1.57076543263478322931891424269, si(5000.0), FP);
    assertEquals(1.57089154538596191572237216834, si(10000.0), FP);
    assertEquals(1.57079668473995173899800005297, si(50000.0), FP);
    assertEquals(1.57080632039939412283916930689, si(100000.0), FP);
    assertEquals(1.5707963259570095, si(1E9), FP);
    assertEquals(-1.5707963259570095, si(-1E9), FP);
    assertEquals(1.5707963260156887, si(1000000000.1), FP);
    assertEquals(-1.5707963260156887, si(-1000000000.1), FP);
    assertEquals(1.57079632678583, si(1990000000.0), FP);
    assertEquals(-1.57079632678583, si(-1990000000.0), FP);
    assertEquals(1.5707963265928415, si(2E9), FP);
    assertEquals(-1.5707963265928415, si(-2E9), FP);

    // test that Si(x) = -Si(-x)
    for (double x = 0.0; x < 15.0; x += 0.01) {
      assertEquals(si(x), -si(-x), 1.0E-15);
    }
  }

  public void testCi() {
    // special cases
    assertEqualsLocal(Double.NaN, ci(Double.NaN), 0.0);
    assertEqualsLocal(Double.NEGATIVE_INFINITY, ci(0.0), 0.0);

    // some general cases, test values from Magma package
    assertEquals(-1.72786838665729663899772515296, ci(0.1), FP);
    assertEquals(-1.0422055956727819753629169067248, ci(0.2), FP);
    assertEquals(-0.64917293297116174495618110520, ci(0.3), FP);
    assertEquals(-0.378809346425244332084661757236, ci(0.4), FP);
    assertEquals(-0.177784078806612901335810271029, ci(0.5), FP);
    assertEquals(-0.0222707069592797625266027438084, ci(0.6), FP);
    assertEquals(0.100514707008897832689135893029, ci(0.7), FP);
    assertEquals(0.198278615952467177015833582478, ci(0.8), FP);
    assertEquals(0.276067830467772860150434116742, ci(0.9), FP);
    assertEquals(0.337403922900968134662646205803, ci(1.0), FP);
    assertEquals(0.384873377424650815498332399083, ci(1.1), FP);
    assertEquals(0.420459182894240502715370786746, ci(1.2), FP);
    assertEquals(0.445738567528534523049756952410, ci(1.3), FP);
    assertEquals(0.462006585094677276312055748725, ci(1.4), FP);
    assertEquals(0.470356317195399886675082155831, ci(1.5), FP);
    assertEquals(0.471732516931877803367512357872, ci(1.6), FP);
    assertEquals(0.466968364176954630307487820988, ci(1.7), FP);
    assertEquals(0.456811129418336893123578904439, ci(1.8), FP);
    assertEquals(0.441940349681598845918870424441, ci(1.9), FP);
    assertEquals(0.422980828774864995698565158978, ci(2.0), FP);
    assertEquals(0.400511987844396390457993940839, ci(2.1), FP);
    assertEquals(0.375074599049832154012056871002, ci(2.2), FP);
    assertEquals(0.347175617540316224441762932780, ci(2.3), FP);
    assertEquals(0.317291617436697983729640006695, ci(2.4), FP);
    assertEquals(0.285871196365383495389100654423, ci(2.5), FP);
    assertEquals(0.253336616062584192215720078385, ci(2.6), FP);
    assertEquals(0.055257411719942491718896804376, ci(3.2), FP);
    assertEquals(0.0246782846079581136491380968137, ci(3.3), FP);
    assertEquals(-0.00451807793074195358345045898431, ci(3.4), FP);
    assertEquals(-0.0321285485124811156166944007826, ci(3.5), FP);
    assertEquals(-0.197047079722356195437332682676, ci(4.6), FP);
    assertEquals(-0.198391246842472851933527694419, ci(4.7), FP);
    assertEquals(-0.197603613309935236398691767150, ci(4.8), FP);
    assertEquals(-0.194779806026237225082643607000, ci(4.9), FP);
    assertEquals(-0.190029749656643878618458901931, ci(5.0), FP);
    assertEquals(-0.183476263159298893723361291582, ci(5.1), FP);
    assertEquals(-0.175253602265659484505598506369, ci(5.2), FP);
    assertEquals(-0.165505958558927252709543397950, ci(5.3), FP);
    assertEquals(-0.154385926190724432667282245032, ci(5.4), FP);
    assertEquals(-0.142052947551519255251890595070, ci(5.5), FP);
    assertEquals(-0.128671749369807815179573884796, ci(5.6), FP);
    assertEquals(-0.114410780761679062070561146063, ci(5.7), FP);
    assertEquals(-0.099440664689378584533714314702, ci(5.8), FP);
    assertEquals(-0.083932674118556493758690781714, ci(5.9), FP);
    assertEquals(-0.068057243893247126204168319644, ci(6.0), FP);
    assertEquals(-0.051982528980021969378621842733, ci(6.1), FP);
    assertEquals(-0.0358730192734549914079799037391, ci(6.2), FP);
    assertEquals(-0.0198882206098422172139421144206, ci(6.3), FP);
    assertEquals(-0.00418141101133506290090887175654, ci(6.4), FP);
    assertEquals(0.0111015195149301086806093035757, ci(6.5), FP);
    assertEquals(0.0258231380612632636016882230647, ci(6.6), FP);
    assertEquals(0.0398554400470434564700119577727, ci(6.7), FP);
    assertEquals(0.053080716720199198281475647296, ci(6.8), FP);
    assertEquals(0.065392313975951504454494699582, ci(6.9), FP);
    assertEquals(0.076695278482184518382915781079, ci(7.0), FP);
    assertEquals(0.086906888071347839658248738630, ci(7.1), FP);
    assertEquals(0.083679369633444155412269238916, ci(8.7), FP);
    assertEquals(0.074759719566173203927479445020, ci(8.8), FP);
    assertEquals(0.065280385004315410139689136328, ci(8.9), FP);
    assertEquals(0.055347531333133607085641709457, ci(9.0), FP);
    assertEquals(0.0450693325426121435226003003686, ci(9.1), FP);
    assertEquals(0.0345549134197598798095350951580, ci(9.2), FP);
    assertEquals(0.0239133044692757196495102675228, ci(9.3), FP);
    assertEquals(0.0132524186698849023375612175407, ci(9.4), FP);
    assertEquals(0.00267805883565065741927019180528, ci(9.5), FP);
    assertEquals(-0.0077070360585335215311459240711, ci(9.6), FP);
    assertEquals(-0.0178040977058374733708507878132, ci(9.7), FP);
    assertEquals(-0.0275191811098093882139553183607, ci(9.8), FP);
    assertEquals(-0.0367639562968363760566327322265, ci(9.9), FP);
    assertEquals(-0.0454564330044553726345327714199, ci(10.0), FP);
    assertEquals(-0.053521612945171513349096283066, ci(10.1), FP);
    assertEquals(-0.060892064977711433557735084566, ci(10.2), FP);
    assertEquals(-0.067508419281302415399736747683, ci(10.3), FP);
    assertEquals(-0.0193828102148375455065026616402, ci(12.4), FP);
    assertEquals(-0.0114083495951416194840632486388, ci(12.5), FP);
    assertEquals(-0.00344457552898438788966618102116, ci(12.6), FP);
    assertEquals(0.00442973774362303975759062937539, ci(12.7), FP);
    assertEquals(0.0121379322914037982176309692654, ci(12.8), FP);
    assertEquals(0.0196061745132067468754675274508, ci(12.9), FP);
    assertEquals(0.0267641255640345550367500055140, ci(13.0), FP);
    assertEquals(0.0335455684018775387034305584164, ci(13.1), FP);
    assertEquals(0.0398889861548452300639250868184, ci(13.2), FP);
    assertEquals(0.0457380870344170830686764874716, ci(13.3), FP);
    assertEquals(0.051042271584627812915088376390, ci(13.4), FP);
    assertEquals(0.055757038653030555777067513738, ci(13.5), FP);
    assertEquals(0.059844327091476403560424639167, ci(13.6), FP);
    assertEquals(0.067665523010222896576719769476, ci(14.4), FP);
    assertEquals(0.065536986125961612649045339323, ci(14.5), FP);
    assertEquals(0.062781055111402021673900654647, ci(14.6), FP);
    assertEquals(0.059433643777715182910746391704, ci(14.7), FP);
    assertEquals(0.055535992018363686893481620265, ci(14.8), FP);
    assertEquals(0.051134192654969133903103658269, ci(14.9), FP);
    assertEquals(0.0462786776743604396043110522328, ci(15.0), FP);
    assertEquals(-0.0056283863241163054401853484759, ci(50.0), FP);
    assertEquals(-0.0051488251426104921444429197961, ci(100.0), FP);
    assertEquals(-0.00093200081440429025451259557440, ci(500.0), FP);
    assertEquals(0.00082631551109068228201833308569, ci(1000.0), FP);
    assertEquals(-0.000197599458680662351079554136465, ci(5000.0), FP);
    assertEquals(-0.0000305519167244852124594810517658, ci(10000.0), FP);
    assertEquals(5.458434486108123E-10, ci(1000000000.0), FP);
    assertEquals(6.267656643864058E-10, ci(1000000000.1), FP);
    assertEquals(-5.024307637156335E-10, ci(1990000000.0), FP);
    for (double x = 0.01; x < 15.0; x += 0.01) {
      assertEqualsLocal(Double.NaN, ci(-x), 0.0);
    }
  }

  public void testShi() {
    assertEquals(0.0, shi(0.0), FP);
    assertEqualsLocal(Double.NaN, shi(Double.NaN), 0.0);
    assertEqualsLocal(Double.POSITIVE_INFINITY, shi(Double.POSITIVE_INFINITY), 0.0);
    assertEqualsLocal(Double.NEGATIVE_INFINITY, shi(Double.NEGATIVE_INFINITY), 0.0);
    assertEqualsLocal(Double.POSITIVE_INFINITY, shi(Double.MAX_VALUE), 0.0);
    assertEquals(0.100055572225056995557615329458, shi(0.1), FP);
    assertEquals(0.200444978140746386340730853694, shi(0.2), FP);
    assertEquals(0.301504056205010413981095309754, shi(0.3), FP);
    assertEquals(0.403572668742493635905979378191, shi(0.4), FP);
    assertEquals(0.50699674981966719583365987506, shi(0.5), FP);
    assertEquals(0.61213039656338077262456278342, shi(0.6), FP);
    assertEquals(0.71933801892889984241912125775, shi(0.7), FP);
    assertEquals(0.82899656337893448638691046761, shi(0.8), FP);
    assertEquals(0.94149782651143354092270164031, shi(0.9), FP);
    assertEquals(1.0572508753757285145718423483434, shi(1.0), FP);
    assertEquals(1.176684592049721489640504650791, shi(1.1), FP);
    assertEquals(1.300250361022057100577026609891, shi(1.2), FP);
    assertEquals(4.064764643524311586748539374418, shi(2.7), FP);
    assertEquals(4.348076508127190655131966313556, shi(2.8), FP);
    assertEquals(4.65042410289680464913971757214, shi(2.9), FP);
    assertEquals(4.97344047585980679771041832888, shi(3.0), FP);
    assertEquals(5.318897351437731304017009858584, shi(3.1), FP);
    assertEquals(5.68871782473403934900733327277, shi(3.2), FP);
    assertEquals(6.084990208082443524664260799732, shi(3.3), FP);
    assertEquals(6.50998313882300591424651417657, shi(3.4), FP);
    assertEquals(6.96616206750494184225971833670, shi(3.5), FP);
    assertEquals(7.456207256934443891436582952686, shi(3.6), FP);
    assertEquals(7.98303343478681831984296848510, shi(3.7), FP);
    assertEquals(8.54981125598869914835200086052, shi(3.8), FP);
    assertEquals(9.159990745862126144867107392739, shi(3.9), FP);
    assertEquals(9.81732691123303446456229704905, shi(4.0), FP);
    assertEquals(10.52590772447962564209032459036, shi(4.1), FP);
    assertEquals(11.290184704982012568016632119638, shi(4.2), FP);
    assertEquals(12.115006343799027809460764503295, shi(4.3), FP);
    assertEquals(13.00565464082290090331070523537404, shi(4.4), FP);
    assertEquals(13.96788504934714762174679636254, shi(4.5), FP);
    assertEquals(15.0079701511464690369573177343413, shi(4.6), FP);
    assertEquals(58.96754682406890835277626511604, shi(6.4), FP);
    assertEquals(63.87371183154640231367516903253, shi(6.5), FP);
    assertEquals(69.213091495982857929701563988877, shi(6.6), FP);
    assertEquals(75.0252927795446302316148678058002, shi(6.7), FP);
    assertEquals(81.353616164611829867947293674248, shi(6.8), FP);
    assertEquals(88.245405186420627635569734761849, shi(6.9), FP);
    assertEquals(95.75242940861650314563978279018, shi(7.0), FP);
    assertEquals(103.93130406999636072166962187980, shi(7.1), FP);
    assertEquals(112.84394994459034879285926610595, shi(7.2), FP);
    assertEquals(122.55809730180927794903435352393, shi(7.3), FP);
    assertEquals(133.147838231679325868988994534036, shi(7.4), FP);
    assertEquals(144.69423201551893749779458733740, shi(7.5), FP);
    assertEquals(157.285968678427826906395442328970, shi(7.6), FP);
    assertEquals(171.0200963606592648587102218197982, shi(7.7), FP);
    assertEquals(186.00281869473477196761133354524246, shi(7.8), FP);
    assertEquals(202.350368978870469319277670858915, shi(7.9), FP);
    assertEquals(220.189968600230556461163151094811, shi(8.0), FP);
    assertEquals(239.66087788954542668781621797498, shi(8.1), FP);
    assertEquals(1246.114490199423344411881619066065, shi(10.0), 1.0E-8);
    assertEquals(1361.356813041891246972728079547411, shi(10.1), 1.0E-8);
    assertEquals(1487.464556830015378775333930080267, shi(10.2), 1.0E-8);
    assertEquals(1625.475543423864966016634584686222, shi(10.3), 1.0E-8);
    assertEquals(1776.52768927534389622220337984695, shi(10.4), 1.0E-8);
    assertEquals(5208.50872005237522478786972326120, shi(11.6), 1.0E-8);
    assertEquals(5700.91925965445071690576326417573, shi(11.7), 1.0E-8);
    assertEquals(6240.485869353364159738489878738578, shi(11.8), 1.0E-8);
    assertEquals(6831.76730865261935157547233036610, shi(11.9), 1.0E-8);
    assertEquals(67404.56138121141903042519121516382, shi(14.4), 1.0E-8);
    assertEquals(73933.086104610466495826728153372281, shi(14.5), 1.0E-8);
    assertEquals(81098.63565355751221436902627099969, shi(14.6), 1.0E-8);
    assertEquals(88963.73960125544695234672433282041, shi(14.7), 1.0E-8);
    assertEquals(97597.095887831585040637198161847716, shi(14.8), 1.0E-8);
    assertEquals(107074.181889559835076504864508406848, shi(14.9), 1.0E-8);
    assertEquals(117477.92624539374492858353692875413, shi(15.0), 1.0E-8);
    assertEquals(1.0, 1938952.165298722 / shi(18.0), FP);
    assertEquals(1.0, 3104685.7772230264 / shi(18.5), FP);
    assertEquals(1.0, 2.0687121910026445E12 / shi(32.5), FP);
    assertEquals(1.0, 9.493446879912849E35 / shi(88.0), FP);
    assertEqualsLocal(Double.POSITIVE_INFINITY, shi(88.0001), FP);
    for (double x = 0.0; x < 150.0; x += 0.3) {
      assertEquals(shi(x), -shi(-x), FP);
    }
  }

  public void testChi() {
    assertEqualsLocal(Double.NEGATIVE_INFINITY, chi(0.0), FP);
    assertEqualsLocal(Double.NaN, chi(Double.NaN), 0.0);
    assertEqualsLocal(Double.NaN, chi(-1.0), 0.0);
    assertEqualsLocal(Double.NaN, chi(-1.0E-10), 0.0);
    assertEqualsLocal(Double.NaN, chi(-1.0E10), 0.0);
    assertEqualsLocal(Double.NaN, chi(Double.NEGATIVE_INFINITY), 0.0);
    assertEqualsLocal(Double.POSITIVE_INFINITY, chi(Double.POSITIVE_INFINITY), 0.0);
    assertEqualsLocal(Double.POSITIVE_INFINITY, chi(Double.MAX_VALUE), 0.0);

    assertEquals(-1.72286838619433367052329832885, chi(0.1), FP);
    assertEquals(-1.0222055660431467019940417238835, chi(0.2), FP);
    assertEquals(-0.60417259547083629844923221201, chi(0.3), FP);
    assertEquals(-0.298807450123168842677049615251, chi(0.4), FP);
    assertEquals(-0.052776844956493615913136063602, chi(0.5), FP);
    assertEquals(0.157750893373978664468574545313, chi(0.6), FP);
    assertEquals(0.345569175695390698152502333103, chi(0.7), FP);
    assertEquals(0.51839998483339145173208591355, chi(0.8), FP);
    assertEquals(0.68131388718543390042148977692, chi(0.9), FP);
    assertEquals(0.83786694098020824089467857679, chi(1.0), FP);
    assertEquals(0.99069368751368133394328268043, chi(1.1), FP);
    assertEquals(1.141841924170594539152070644547, chi(1.2), FP);
    assertEquals(1.292973961191447213375936485988, chi(1.3), FP);
    assertEquals(1.445494075789643825413848408144, chi(1.4), FP);
    assertEquals(1.60063293336158259302775098170, chi(1.5), FP);
    assertEquals(1.75950580766096471156916847931, chi(1.6), FP);
    assertEquals(1.92315427847682562327253500012, chi(1.7), FP);
    assertEquals(6.076051165540411386091944919707, chi(3.3), FP);
    assertEquals(6.50209216531744007255540427095, chi(3.4), FP);
    assertEquals(6.95919192764739344934044543810, chi(3.5), FP);
    assertEquals(7.450046842602646582011639669917, chi(3.6), FP);
    assertEquals(7.97758561013004785626863895276, chi(3.7), FP);
    assertEquals(8.54499100917220150774230171626, chi(3.8), FP);
    assertEquals(9.155723600580907573606798493488, chi(3.9), FP);
    assertEquals(9.81354755882318555808342221582, chi(4.0), FP);
    assertEquals(10.52255884384355593218294313867, chi(4.1), FP);
    assertEquals(11.287215942800070620225485361121, chi(4.2), FP);
    assertEquals(12.112373431842204051462652240644, chi(4.3), FP);
    assertEquals(13.00331863078224507431660146568661, chi(4.4), FP);
    assertEquals(13.96581164859243300731391079513, chi(4.5), FP);
    assertEquals(29.232436661887039359671705300776, chi(5.5), FP);
    assertEquals(31.55060756706480663797499876400, chi(5.6), FP);
    assertEquals(34.067235345528859790347548927811, chi(5.7), FP);
    assertEquals(36.80016709469568464140020021868, chi(5.8), FP);
    assertEquals(39.76889312068931385718625462528, chi(5.9), FP);
    assertEquals(42.99470102999352107246204853740, chi(6.0), FP);
    assertEquals(46.50084444996786893168729937060, chi(6.1), FP);
    assertEquals(50.312727782158321160846364767495, chi(6.2), FP);
    assertEquals(144.69416618462567041756397047654, chi(7.5), FP);
    assertEquals(157.285909819655751522500348603799, chi(7.6), FP);
    assertEquals(171.0200437280461489369215542904909, chi(7.7), FP);
    assertEquals(186.00277162308099993984387168167314, chi(7.8), FP);
    assertEquals(202.350326874873337777275002304299, chi(7.9), FP);
    assertEquals(220.189930934607712536261378589836, chi(8.0), FP);
    assertEquals(239.66084419003497130390960990329, chi(8.1), FP);
    assertEquals(1246.114486042454414726557341712044, chi(10.0), 1.0E-8);
    assertEquals(1361.356809314849519377334171559982, chi(10.1), 1.0E-8);
    assertEquals(1487.464553488154841324390160384719, chi(10.2), 1.0E-8);
    assertEquals(1625.475540427130194418730986169827, chi(10.3), 1.0E-8);
    assertEquals(1776.52768658787431720924334340835, chi(10.4), 1.0E-8);
    assertEquals(1941.86873145832794349250060813803, chi(10.5), 1.0E-8);
    assertEquals(2122.86691752056746381401310574972, chi(10.6), 1.0E-8);
    assertEquals(2321.0227152964141613373053671485766, chi(10.7), 1.0E-8);
    assertEquals(2537.98169627940120177864114648533, chi(10.8), 1.0E-8);
    assertEquals(2775.54866671407584307528982151038, chi(10.9), 1.0E-8);
    assertEquals(3035.70318634915560185872102216124, chi(11.0), 1.0E-8);
    assertEquals(3320.61660856449352413619644085017, chi(11.1), 1.0E-8);
    assertEquals(3632.67079176344051021206680978610, chi(11.2), 1.0E-8);
    assertEquals(3974.478646753337412247892657737666, chi(11.3), 1.0E-8);
    assertEquals(4348.90670114095903625248954534519, chi(11.4), 1.0E-8);
    assertEquals(4759.099879693529488211043510684376, chi(11.5), 1.0E-8);
    assertEquals(5208.50871932086260128392853722750, chi(11.6), 1.0E-8);
    assertEquals(5700.91925899781674725339183916481, chi(11.7), 1.0E-8);
    assertEquals(6240.485868763906528680883580151612, chi(11.8), 1.0E-8);
    assertEquals(6831.76730812343240078639043091977, chi(11.9), 1.0E-8);
    assertEquals(7479.76633296121033491260039803748, chi(12.0), 1.0E-8);
    assertEquals(8189.97320174588856619461126574107, chi(12.1), 1.0E-8);
    assertEquals(8968.413466600924171200864282374801, chi(12.2), 1.0E-8);
    assertEquals(9821.70047309718084876955707375149, chi(12.3), 1.0E-8);
    assertEquals(10757.093034706920297139420816942754, chi(12.4), 1.0E-8);
    assertEquals(11782.55879413747064442528852517526, chi(12.5), 1.0E-8);
    assertEquals(12906.84383465298109669470835424436, chi(12.6), 1.0E-8);
    assertEquals(67404.56138117508760165443667317754, chi(14.4), 1.0E-8);
    assertEquals(73933.086104577806068921691397956764, chi(14.5), 1.0E-8);
    assertEquals(81098.63565352815061654880334186751, chi(14.6), 1.0E-8);
    assertEquals(88963.73960122904988242932641619770, chi(14.7), 1.0E-8);
    assertEquals(97597.095887807852199456369749569762, chi(14.8), 1.0E-8);
    assertEquals(107074.181889538496694512532361940806, chi(14.9), 1.0E-8);
    assertEquals(117477.92624537455864966205829399200, chi(15.0), 1.0E-8);
    assertEquals(1.0, 9.493446879912849E35 / chi(88.0), FP);
    assertEquals(1.0, 3.5330650700515325E35 / chi(87.0), FP);
    assertEquals(1.0, 1938952.1652987215 / chi(18.0), FP);
    assertEquals(1.0, 1938970.404265165 / chi(18.00001), FP);
    assertEquals(1.0, 8.557233565018183E7 / chi(22.0), FP);
    assertEquals(1.0, 1.275021783178893E12 / chi(32.0), FP);
    assertEqualsLocal(Double.POSITIVE_INFINITY, chi(88.0001), FP);
    double sumChi = 0;
    double sumShi = 0;
    for (double x = 18; x < 88; x += 0.1) {
      sumChi += chi(x);
      sumShi += shi(x);
    }
    assertEquals(1.0, sumShi / sumChi, FP);
  }
}
