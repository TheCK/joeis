package irvine.factor.gnfs;

import java.util.Arrays;
import java.util.Random;

import junit.framework.TestCase;

/**
 * Tests the corresponding class.
 * @author Sean A. Irvine
 */
public class VectorTimesMatrixTest extends TestCase {

  public void testMultiplyVectorMatF() {
    final long[] m = new long[64];
    final long[] v1 = new long[100];
    final long[] v2 = new long[100];
    for (int i = 0; i < 64; ++i) {
      m[i] = 1L << i;
    }
    for (int i = 0; i < 100; ++i) {
      v1[i] = i;
    }
    VectorTimesMatrix.multiplyVectorMatrixF(v1, m, v2, 100);
    assertEquals(0x0000000000000000L, v2[0]);
    assertEquals(0x0000000000000001L, v2[1]);
    assertEquals(0x0000000000000001L, v2[2]);
    assertEquals(0x0000000000000000L, v2[3]);
    assertEquals(0x0000000000000001L, v2[4]);
    assertEquals(0x0000000000000000L, v2[5]);
    assertEquals(0x0000000000000000L, v2[6]);
    assertEquals(0x0000000000000001L, v2[7]);
    assertEquals(0x0000000000000001L, v2[8]);
    assertEquals(0x0000000000000000L, v2[9]);
    assertEquals(0x0000000000000000L, v2[10]);
    assertEquals(0x0000000000000001L, v2[11]);
    assertEquals(0x0000000000000000L, v2[12]);
    assertEquals(0x0000000000000001L, v2[13]);
    assertEquals(0x0000000000000001L, v2[14]);
    assertEquals(0x0000000000000000L, v2[15]);
    assertEquals(0x0000000000000001L, v2[16]);
    assertEquals(0x0000000000000000L, v2[17]);
    assertEquals(0x0000000000000000L, v2[18]);
    assertEquals(0x0000000000000001L, v2[19]);
    assertEquals(0x0000000000000000L, v2[20]);
    assertEquals(0x0000000000000001L, v2[21]);
    assertEquals(0x0000000000000001L, v2[22]);
    assertEquals(0x0000000000000000L, v2[23]);
    assertEquals(0x0000000000000000L, v2[24]);
    assertEquals(0x0000000000000001L, v2[25]);
    assertEquals(0x0000000000000001L, v2[26]);
    assertEquals(0x0000000000000000L, v2[27]);
    assertEquals(0x0000000000000001L, v2[28]);
    assertEquals(0x0000000000000000L, v2[29]);
    assertEquals(0x0000000000000000L, v2[30]);
    assertEquals(0x0000000000000001L, v2[31]);
    assertEquals(0x0000000000000001L, v2[32]);
    assertEquals(0x0000000000000000L, v2[33]);
    assertEquals(0x0000000000000000L, v2[34]);
    assertEquals(0x0000000000000001L, v2[35]);
    assertEquals(0x0000000000000000L, v2[36]);
    assertEquals(0x0000000000000001L, v2[37]);
    assertEquals(0x0000000000000001L, v2[38]);
    assertEquals(0x0000000000000000L, v2[39]);
    assertEquals(0x0000000000000000L, v2[40]);
    assertEquals(0x0000000000000001L, v2[41]);
    assertEquals(0x0000000000000001L, v2[42]);
    assertEquals(0x0000000000000000L, v2[43]);
    assertEquals(0x0000000000000001L, v2[44]);
    assertEquals(0x0000000000000000L, v2[45]);
    assertEquals(0x0000000000000000L, v2[46]);
    assertEquals(0x0000000000000001L, v2[47]);
    assertEquals(0x0000000000000000L, v2[48]);
    assertEquals(0x0000000000000001L, v2[49]);
    assertEquals(0x0000000000000001L, v2[50]);
    assertEquals(0x0000000000000000L, v2[51]);
    assertEquals(0x0000000000000001L, v2[52]);
    assertEquals(0x0000000000000000L, v2[53]);
    assertEquals(0x0000000000000000L, v2[54]);
    assertEquals(0x0000000000000001L, v2[55]);
    assertEquals(0x0000000000000001L, v2[56]);
    assertEquals(0x0000000000000000L, v2[57]);
    assertEquals(0x0000000000000000L, v2[58]);
    assertEquals(0x0000000000000001L, v2[59]);
    assertEquals(0x0000000000000000L, v2[60]);
    assertEquals(0x0000000000000001L, v2[61]);
    assertEquals(0x0000000000000001L, v2[62]);
    assertEquals(0x0000000000000000L, v2[63]);
    assertEquals(0x0000000000000001L, v2[64]);
    assertEquals(0x0000000000000000L, v2[65]);
    assertEquals(0x0000000000000000L, v2[66]);
    assertEquals(0x0000000000000001L, v2[67]);
    assertEquals(0x0000000000000000L, v2[68]);
    assertEquals(0x0000000000000001L, v2[69]);
    assertEquals(0x0000000000000001L, v2[70]);
    assertEquals(0x0000000000000000L, v2[71]);
    assertEquals(0x0000000000000000L, v2[72]);
    assertEquals(0x0000000000000001L, v2[73]);
    assertEquals(0x0000000000000001L, v2[74]);
    assertEquals(0x0000000000000000L, v2[75]);
    assertEquals(0x0000000000000001L, v2[76]);
    assertEquals(0x0000000000000000L, v2[77]);
    assertEquals(0x0000000000000000L, v2[78]);
    assertEquals(0x0000000000000001L, v2[79]);
    assertEquals(0x0000000000000000L, v2[80]);
    assertEquals(0x0000000000000001L, v2[81]);
    assertEquals(0x0000000000000001L, v2[82]);
    assertEquals(0x0000000000000000L, v2[83]);
    assertEquals(0x0000000000000001L, v2[84]);
    assertEquals(0x0000000000000000L, v2[85]);
    assertEquals(0x0000000000000000L, v2[86]);
    assertEquals(0x0000000000000001L, v2[87]);
    assertEquals(0x0000000000000001L, v2[88]);
    assertEquals(0x0000000000000000L, v2[89]);
    assertEquals(0x0000000000000000L, v2[90]);
    assertEquals(0x0000000000000001L, v2[91]);
    assertEquals(0x0000000000000000L, v2[92]);
    assertEquals(0x0000000000000001L, v2[93]);
    assertEquals(0x0000000000000001L, v2[94]);
    assertEquals(0x0000000000000000L, v2[95]);
    assertEquals(0x0000000000000000L, v2[96]);
    assertEquals(0x0000000000000001L, v2[97]);
    assertEquals(0x0000000000000001L, v2[98]);
    assertEquals(0x0000000000000000L, v2[99]);
  }

  public void testMultiplyVectorMatF2() {
    final long[] m = new long[64];
    final long[] v1 = new long[100];
    final long[] v2 = new long[100];
    for (int i = 0; i < 64; ++i) {
      m[i] = ~(1L << i);
    }
    for (int i = 0; i < 100; ++i) {
      v1[i] = ~i;
    }
    VectorTimesMatrix.multiplyVectorMatrixF(v1, m, v2, 100);
    assertEquals(0x0000000000000000L, v2[0]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[1]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[2]);
    assertEquals(0x0000000000000000L, v2[3]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[4]);
    assertEquals(0x0000000000000000L, v2[5]);
    assertEquals(0x0000000000000000L, v2[6]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[7]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[8]);
    assertEquals(0x0000000000000000L, v2[9]);
    assertEquals(0x0000000000000000L, v2[10]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[11]);
    assertEquals(0x0000000000000000L, v2[12]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[13]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[14]);
    assertEquals(0x0000000000000000L, v2[15]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[16]);
    assertEquals(0x0000000000000000L, v2[17]);
    assertEquals(0x0000000000000000L, v2[18]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[19]);
    assertEquals(0x0000000000000000L, v2[20]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[21]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[22]);
    assertEquals(0x0000000000000000L, v2[23]);
    assertEquals(0x0000000000000000L, v2[24]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[25]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[26]);
    assertEquals(0x0000000000000000L, v2[27]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[28]);
    assertEquals(0x0000000000000000L, v2[29]);
    assertEquals(0x0000000000000000L, v2[30]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[31]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[32]);
    assertEquals(0x0000000000000000L, v2[33]);
    assertEquals(0x0000000000000000L, v2[34]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[35]);
    assertEquals(0x0000000000000000L, v2[36]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[37]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[38]);
    assertEquals(0x0000000000000000L, v2[39]);
    assertEquals(0x0000000000000000L, v2[40]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[41]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[42]);
    assertEquals(0x0000000000000000L, v2[43]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[44]);
    assertEquals(0x0000000000000000L, v2[45]);
    assertEquals(0x0000000000000000L, v2[46]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[47]);
    assertEquals(0x0000000000000000L, v2[48]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[49]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[50]);
    assertEquals(0x0000000000000000L, v2[51]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[52]);
    assertEquals(0x0000000000000000L, v2[53]);
    assertEquals(0x0000000000000000L, v2[54]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[55]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[56]);
    assertEquals(0x0000000000000000L, v2[57]);
    assertEquals(0x0000000000000000L, v2[58]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[59]);
    assertEquals(0x0000000000000000L, v2[60]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[61]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[62]);
    assertEquals(0x0000000000000000L, v2[63]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[64]);
    assertEquals(0x0000000000000000L, v2[65]);
    assertEquals(0x0000000000000000L, v2[66]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[67]);
    assertEquals(0x0000000000000000L, v2[68]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[69]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[70]);
    assertEquals(0x0000000000000000L, v2[71]);
    assertEquals(0x0000000000000000L, v2[72]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[73]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[74]);
    assertEquals(0x0000000000000000L, v2[75]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[76]);
    assertEquals(0x0000000000000000L, v2[77]);
    assertEquals(0x0000000000000000L, v2[78]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[79]);
    assertEquals(0x0000000000000000L, v2[80]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[81]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[82]);
    assertEquals(0x0000000000000000L, v2[83]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[84]);
    assertEquals(0x0000000000000000L, v2[85]);
    assertEquals(0x0000000000000000L, v2[86]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[87]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[88]);
    assertEquals(0x0000000000000000L, v2[89]);
    assertEquals(0x0000000000000000L, v2[90]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[91]);
    assertEquals(0x0000000000000000L, v2[92]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[93]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[94]);
    assertEquals(0x0000000000000000L, v2[95]);
    assertEquals(0x0000000000000000L, v2[96]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[97]);
    assertEquals(0xFFFFFFFFFFFFFFFEL, v2[98]);
    assertEquals(0x0000000000000000L, v2[99]);
  }

  public void testMultiplyVectorMatFRandom() {
    final long[] m = new long[64];
    final long[] v1 = new long[100];
    final long[] v2 = new long[100];
    final Random r = new Random(42);
    for (int i = 0; i < 64; ++i) {
      m[i] = r.nextLong();
    }
    for (int i = 0; i < 100; ++i) {
      v1[i] = r.nextLong();
    }
    VectorTimesMatrix.multiplyVectorMatrixF(v1, m, v2, 100);
    assertEquals("[0, 0, 0, -5025562857975149833, 0, 0, 0, -5025562857975149833, 0, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, 0, -5025562857975149833, 0, -5025562857975149833, 0, 0, 0, -5025562857975149833, -5025562857975149833, -5025562857975149833, 0, -5025562857975149833, 0, 0, -5025562857975149833, -5025562857975149833, 0, 0, -5025562857975149833, -5025562857975149833, 0, 0, 0, -5025562857975149833, -5025562857975149833, 0, 0, 0, 0, -5025562857975149833, -5025562857975149833, 0, -5025562857975149833, 0, 0, -5025562857975149833, 0, 0, 0, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, -5025562857975149833, 0, 0, -5025562857975149833, 0, -5025562857975149833, 0, 0, -5025562857975149833, -5025562857975149833, 0, -5025562857975149833, -5025562857975149833, -5025562857975149833, 0, 0, -5025562857975149833, -5025562857975149833, 0, 0, -5025562857975149833, -5025562857975149833, 0, 0, 0, 0, -5025562857975149833, 0, -5025562857975149833, 0, 0, -5025562857975149833, -5025562857975149833, 0, -5025562857975149833, 0, -5025562857975149833, -5025562857975149833, -5025562857975149833]", Arrays.toString(v2));
  }

  public void testMultiplyVectorMatRandom() {
    final long[] m = new long[64];
    final long[] v1 = new long[100];
    final long[] v2 = new long[100];
    final Random r = new Random(42);
    for (int i = 0; i < 64; ++i) {
      m[i] = r.nextLong();
    }
    for (int i = 0; i < 100; ++i) {
      v1[i] = r.nextLong();
    }
    VectorTimesMatrix.multiplyVectorMatrix(v1, m, v2, 100);
    assertEquals("[-4698486427190943366, -419626685923094869, 8919085753710469540, -1746985419944142679, 4204795217201711935, 134933083989198302, 4605553943411157205, -6022478824887701659, 2575922427450172875, 1999090379467866234, 6333939591354445934, -39599396512522206, 6916682531631936937, 327732739796928736, 8375595948828828186, 2869205797661198773, 6686053449545896713, -8821296015257168255, -3090413006232271703, -2768883861886595446, 5018245926651973520, 8256250957645627043, -5090257958499350775, 342295874661655523, 3744109678809252798, -5937247731043649736, -339886753412103852, -4219077851891312435, 8878440296592735731, 8092520334006770567, 3869625621428961411, -6822153733309803141, -992662359271348791, 2847325117339559503, 8209210687915109526, -140921645024637522, -4351793870527203402, -3283714995928751290, 8689903249006573086, -6089771208516096275, -3683498552414820383, -4745713257909339756, -9153482186341838058, 7235641330957212333, 5879691971710145829, 5155607541853977180, -8314921733515797190, 6631946243778672849, -3183767524183538227, 7517629198417045785, -826395014216473438, -4127600186866963754, -8571489715084821448, 9107019351822157093, 8150913420117898835, 8733018348031978909, 5468770176444584540, -86650275831698308, 7481374042918747998, 20094367737870116, -4285049877947751329, 5350935218507951721, -370423572123633810, 9075567757874019294, -2888076456880514331, -7465490532456351649, -2782824878337981831, -2919960756969069514, -8615428752742149426, 8928408991536271280, 2140109555274034843, -2285525703210851430, -196401327119242877, 8496554613831409937, -1850742417238993080, -3435275874860481462, 606669615430975053, -92017643684326514, -8648071464656973239, -271876378853864446, 7008279990557766242, 1465208698927841964, 1936961760850260267, -4945069755571203941, -8162906722703049200, 1629101523630176567, 9041416832805475153, -4175773485424217481, 65076275930213980, -5080947020403322159, -2040689166854465333, -2249370956866055572, -4914533868820740065, 3604711258786423785, 7494099585300075155, -8406275395197973613, -7736319379170864687, -273668572624410163, 2463047184179109029, -7120924742488188638]", Arrays.toString(v2));
  }
}
