package irvine.factor.gnfs;

import java.util.Arrays;

import junit.framework.TestCase;

/**
 * Tests the corresponding class.
 * @author Sean A. Irvine
 */
public class VectorTimesVectorTest extends TestCase {

  public void testMultiplyVectorVec() {
    final long[] m = new long[64];
    final long[] v1 = new long[100];
    final long[] v2 = new long[100];
    for (int i = 0; i < 100; ++i) {
      v2[i] = (long) i << i;
    }
    for (int i = 0; i < 100; ++i) {
      v1[i] = i * i * i * i * i * i;
    }
    VectorTimesVector.multiplyVectorVector(v1, v2, m, 100);
    assertTrue(Arrays.equals(m, new long[] {0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0xAC28D43FDFA0C302L, 0x34346B58259F6200L, 0x77879B6B24103228L, 0xBB027FE84EB88088L, 0xC62EAF6745D13192L, 0x4F8EA2FA4C862C52L, 0xC39AD3B547D16012L, 0x783AE385D398011AL, 0x7795AF0F12212F50L, 0x4C0374D80A05C662L, 0xFF596E920F0AC578L, 0xBDE9BB1FA3D23F5AL, 0x97F665295DE399B0L, 0x761C2452D9DE55F0L, 0xA019F21DE79716C8L, 0xC610967E5BC8D090L, 0x7B9DACBC0F39FA82L, 0xA15A15BC13D6303AL, 0x6805046C0286DB8AL, 0x960B68E9A35B1792L, 0x44D5D839B3BF5198L, 0x0DF449921B8B9998L, 0xD938F34C33ACA000L, 0xAD2F8222989D01BAL, 0x5EB7C654631E61BAL, 0xDED04F139B919300L, 0x1CC92A002AAA8000L, 0xC81DE388A208A200L, 0x7F3CFEAA0A0A0A00L, 0x0000000000000000L, 0x0000000000000000L, 0x96C93F8AAAAAAA80L}));
  }

  public void testMultiplyVectorVecz() {
    final long[] m = new long[64];
    final long[] v1 = new long[100];
    final long[] v2 = new long[100];
    long j = 0x1234567812345678L;
    for (int i = 0; i < 100; ++i) {
      v2[i] = j;
      j *= j;
    }
    for (int i = 0; i < 100; ++i) {
      v1[i] = j;
      j *= j;
    }
    VectorTimesVector.multiplyVectorVector(v1, v2, m, 100);
    for (int i = 0; i < 64; ++i) {
      assertEquals(0L, m[i]);
    }
  }

  public void testMultiplyVectorVech() {
    final long[] m = new long[64];
    final long[] v1 = new long[100];
    final long[] v2 = new long[100];
    long j = 0x1234567812345678L;
    for (int i = 0; i < 100; ++i) {
      v2[i] = j;
      j += j;
    }
    for (int i = 0; i < 100; ++i) {
      v1[i] = (i - 1) << (7 + i);
    }
    VectorTimesVector.multiplyVectorVector(v1, v2, m, 100);
    assertTrue(Arrays.equals(m, new long[] {0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0xA1EAD655AFB45678L, 0x4BD681506EF45678L, 0xBEC093BCD5D45678L, 0x444D5155D9445678L, 0x3909E49FC6745678L, 0x07AA444C444C5678L, 0x98FB058736905678L, 0x5753C9DB7AEE5678L, 0xB0878B9DF0215678L, 0xC36DB51DDD9CD678L, 0x7A98A264A5199678L, 0x26622F13860A3678L, 0x081F6BEE9D4CE678L, 0x9F21C87812345678L, 0x54BE9922F73BCE78L, 0x317131E33C491278L, 0x8396E5A7B15C8C78L, 0x5AE50F9A54BE9978L, 0x365CFA8C9F21C878L, 0x12345679317131F8L, 0x00000001A0D38238L, 0x091A2B3C12345678L, 0x0D973EA25AE50F98L, 0x8FD1B46D12345678L, 0xCEF2F10A92345678L, 0xE3F46D1B40000000L, 0xF454667420000000L, 0x014FFC9290000000L, 0x01968F78B0000000L, 0x0000000000000000L, 0x0048D159E0000000L, 0x0000000000000000L}));
  }

}
