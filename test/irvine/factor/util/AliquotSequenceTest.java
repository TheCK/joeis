package irvine.factor.util;

import irvine.StandardIoTestCase;
import irvine.math.z.Z;

/**
 * Tests the corresponding class.
 * @author Sean A. Irvine
 */
public class AliquotSequenceTest extends StandardIoTestCase {

  private static final String EXPECTED_PRIME = "2.3.11\n"
      + "2.3.13\n"
      + "2.3^2.5\n"
      + "2^4.3^2\n"
      + "7.37\n"
      + "3^2.5\n"
      + "3.11\n"
      + "3.5\n"
      + "3^2\n"
      + "2^2\n"
      + "3\n"
      + "prime\n";

  public void testPrime() {
    final AliquotSequence as = new AliquotSequence();
    as.aliquot(Z.valueOf(66));
    assertEquals(EXPECTED_PRIME, getOut());
  }

  private static final String EXPECTED_CYCLE = "2^2.5.17.3719\n"
    + "2^2.5.193.401\n"
    + "2^2.521.829\n"
    + "2^5.40787\n"
    + "cycle\n";

  public void testCycle() {
    final AliquotSequence as = new AliquotSequence();
    as.aliquot(Z.valueOf(1264460));
    assertEquals(EXPECTED_CYCLE, getOut());
  }

  private static final String EXPECTED_INCOMPLETE = "(1847699703211741474306835620200164403018549338663410171471785774910651696711161249859337684305435744585616061544571794052229717732524660960646946071249623720442022269756756687378427562389508764678440933285157496578843415088475528298186726451339863364931908084671990431874381283363502795470282653297802934916155811881049844908319545009848393775227257052578591944993870073695755688436933812779613089230392569695253261620823676490316036551371447913932347169566988069)\n"
    + "incomplete 0 C463\n";

  public void testIncomplete() {
    final AliquotSequence as = new AliquotSequence();
    // RSA-1536
    as.aliquot(new Z("1847699703211741474306835620200164403018549338663410171471785774910651696711161249859337684305435744585616061544571794052229717732524660960646946071249623720442022269756756687378427562389508764678440933285157496578843415088475528298186726451339863364931908084671990431874381283363502795470282653297802934916155811881049844908319545009848393775227257052578591944993870073695755688436933812779613089230392569695253261620823676490316036551371447913932347169566988069"));
    assertEquals(EXPECTED_INCOMPLETE, getOut());
  }
}
