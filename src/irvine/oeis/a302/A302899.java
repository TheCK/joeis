package irvine.oeis.a302;
// Generated by gen_seq4.pl egfu at 2021-12-04 17:50

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A302899 Number of permutations of [n] having exactly six alternating descents.
 * E.g.f.: (1440*cos(x)^4 + (- x^6 + 6*x^5 - 30*x^4 + 120*x^3 - 360*x^2 + 720*x)*cos(x)^3 + ((- x^6 + 18*x^5 - 150*x^4 + 840*x^3 - 3240*x^2 + 7920*x - 4320)*sin(x) - 29*x^6 + 420*x^5 - 2610*x^4 + 9120*x^3 - 18360*x^2 + 16560*x - 7200)*cos(x)^2 + 28*x*((x^5 - (129/14)*x^4 + (255/7)*x^3 - 90*x^2 + (900/7)*x - 360/7)*sin(x) + 31*x^5*(1/14) - 321*x^4*(1/14) + 645*x^3*(1/7) - 1170*x^2*(1/7) + 900*x*(1/7) - 360/7)*cos(x) + (90*x^6 - 1104*x^5 + 5640*x^4 - 15120*x^3 + 21600*x^2 - 17280*x + 5760)*sin(x) + 90*x^6 - 1056*x^5 + 5160*x^4 - 13680*x^3 + 21600*x^2 - 17280*x + 5760)/(720*cos(x)^4 + (720*sin(x) - 2160)*cos(x)^3 + (2880*sin(x) - 5760)*cos(x)^2 + (- 2880*sin(x) + 2880)*cos(x) - 5760*sin(x) + 5760)
 * @author Georg Fischer
 */
public class A302899 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A302899() {
    super(7);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.series(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.add(RING.add(RING.add(RING.add(RING.multiply(RING.monomial(new Q(1440), 0), RING.pow(RING.cos(RING.x(), n), 4, n), n), RING.multiply(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.negate(RING.pow(RING.x(), 6, n)), RING.monomial(Q.SIX, 5)), RING.monomial(new Q(30), 4)), RING.monomial(new Q(120), 3)), RING.monomial(new Q(360), 2)), RING.monomial(new Q(720), 1)), RING.pow(RING.cos(RING.x(), n), 3, n), n)), RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.negate(RING.pow(RING.x(), 6, n)), RING.monomial(new Q(18), 5)), RING.monomial(new Q(150), 4)), RING.monomial(new Q(840), 3)), RING.monomial(new Q(3240), 2)), RING.monomial(new Q(7920), 1)), RING.monomial(new Q(4320), 0)), RING.sin(RING.x(), n), n), RING.monomial(new Q(29), 6)), RING.monomial(new Q(420), 5)), RING.monomial(new Q(2610), 4)), RING.monomial(new Q(9120), 3)), RING.monomial(new Q(18360), 2)), RING.monomial(new Q(16560), 1)), RING.monomial(new Q(7200), 0)), RING.pow(RING.cos(RING.x(), n), 2, n), n)), RING.multiply(RING.multiply(RING.monomial(new Q(28), 1), RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.pow(RING.x(), 5, n), RING.multiply(RING.series(RING.monomial(new Q(129), 0), RING.monomial(new Q(14), 0), n), RING.pow(RING.x(), 4, n), n)), RING.multiply(RING.series(RING.monomial(new Q(255), 0), RING.monomial(Q.SEVEN, 0), n), RING.pow(RING.x(), 3, n), n)), RING.monomial(new Q(90), 2)), RING.multiply(RING.series(RING.monomial(new Q(900), 0), RING.monomial(Q.SEVEN, 0), n), RING.x(), n)), RING.series(RING.monomial(new Q(360), 0), RING.monomial(Q.SEVEN, 0), n)), RING.sin(RING.x(), n), n), RING.multiply(RING.monomial(new Q(31), 5), RING.series(RING.one(), RING.monomial(new Q(14), 0), n), n)), RING.multiply(RING.monomial(new Q(321), 4), RING.series(RING.one(), RING.monomial(new Q(14), 0), n), n)), RING.multiply(RING.monomial(new Q(645), 3), RING.series(RING.one(), RING.monomial(Q.SEVEN, 0), n), n)), RING.multiply(RING.monomial(new Q(1170), 2), RING.series(RING.one(), RING.monomial(Q.SEVEN, 0), n), n)), RING.multiply(RING.monomial(new Q(900), 1), RING.series(RING.one(), RING.monomial(Q.SEVEN, 0), n), n)), RING.series(RING.monomial(new Q(360), 0), RING.monomial(Q.SEVEN, 0), n)), n), RING.cos(RING.x(), n), n)), RING.multiply(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.monomial(new Q(90), 6), RING.multiply(RING.monomial(new Q(1104), 0), RING.pow(RING.x(), 5, n), n)), RING.monomial(new Q(5640), 4)), RING.monomial(new Q(15120), 3)), RING.monomial(new Q(21600), 2)), RING.monomial(new Q(17280), 1)), RING.monomial(new Q(5760), 0)), RING.sin(RING.x(), n), n)), RING.monomial(new Q(90), 6)), RING.monomial(new Q(1056), 5)), RING.monomial(new Q(5160), 4)), RING.monomial(new Q(13680), 3)), RING.monomial(new Q(21600), 2)), RING.monomial(new Q(17280), 1)), RING.monomial(new Q(5760), 0)), RING.add(RING.subtract(RING.add(RING.add(RING.add(RING.multiply(RING.monomial(new Q(720), 0), RING.pow(RING.cos(RING.x(), n), 4, n), n), RING.multiply(RING.subtract(RING.multiply(RING.monomial(new Q(720), 0), RING.sin(RING.x(), n), n), RING.monomial(new Q(2160), 0)), RING.pow(RING.cos(RING.x(), n), 3, n), n)), RING.multiply(RING.subtract(RING.multiply(RING.monomial(new Q(2880), 0), RING.sin(RING.x(), n), n), RING.monomial(new Q(5760), 0)), RING.pow(RING.cos(RING.x(), n), 2, n), n)), RING.multiply(RING.add(RING.negate(RING.multiply(RING.monomial(new Q(2880), 0), RING.sin(RING.x(), n), n)), RING.monomial(new Q(2880), 0)), RING.cos(RING.x(), n), n)), RING.multiply(RING.monomial(new Q(5760), 0), RING.sin(RING.x(), n), n)), RING.monomial(new Q(5760), 0)), n);
  }
}
