package irvine.oeis.a302;
// Generated by gen_seq4.pl egfu at 2021-12-04 17:50

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A302900 Number of permutations of [n] having exactly seven alternating descents.
 * E.g.f.: (5040*cos(x)^4 + (7*x^6 - 84*x^5 + 630*x^4 - 3360*x^3 + 12600*x^2 - 30240*x + 5040*sin(x) + 15120)*cos(x)^3 + ((x^7 - 14*x^6 + 126*x^5 - 840*x^4 + 4200*x^3 - 15120*x^2 + 35280*x - 20160)*sin(x) + 60*x^7 - 840*x^6 + 5544*x^5 - 23520*x^4 + 67200*x^3 - 120960*x^2 + 105840*x - 40320)*cos(x)^2 + ((- 196*x^6 + 2352*x^5 - 12600*x^4 + 40320*x^3 - 75600*x^2 + 60480*x - 20160)*sin(x) - 434*x^6 + 5208*x^5 - 25200*x^4 + 60480*x^3 - 75600*x^2 + 60480*x - 20160)*cos(x) + (- 298*x^7 + 4172*x^6 - 25200*x^5 + 85680*x^4 - 176400*x^3 + 211680*x^2 - 141120*x + 40320)*sin(x) - 332*x^7 + 4648*x^6 - 27720*x^5 + 90720*x^4 - 176400*x^3 + 211680*x^2 - 141120*x + 40320)/(5040*cos(x)^4 + (20160*sin(x) - 40320)*cos(x)^2 - 40320*sin(x) + 40320)
 * @author Georg Fischer
 */
public class A302900 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A302900() {
    super(8);
  }

  @Override
  public Polynomial<Q> compute(final int mN) {
    return RING.series(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.add(RING.add(RING.add(RING.multiply(RING.monomial(new Q(5040), 0), RING.pow(RING.cos(RING.x(), mN), 4, mN), mN), RING.multiply(RING.add(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.monomial(new Q(7), 6), RING.multiply(RING.monomial(new Q(84), 0), RING.pow(RING.x(), 5, mN), mN)), RING.monomial(new Q(630), 4)), RING.monomial(new Q(3360), 3)), RING.monomial(new Q(12600), 2)), RING.monomial(new Q(30240), 1)), RING.multiply(RING.monomial(new Q(5040), 0), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(15120), 0)), RING.pow(RING.cos(RING.x(), mN), 3, mN), mN)), RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.pow(RING.x(), 7, mN), RING.monomial(new Q(14), 6)), RING.monomial(new Q(126), 5)), RING.monomial(new Q(840), 4)), RING.monomial(new Q(4200), 3)), RING.monomial(new Q(15120), 2)), RING.monomial(new Q(35280), 1)), RING.monomial(new Q(20160), 0)), RING.sin(RING.x(), mN), mN), RING.monomial(new Q(60), 7)), RING.monomial(new Q(840), 6)), RING.monomial(new Q(5544), 5)), RING.monomial(new Q(23520), 4)), RING.monomial(new Q(67200), 3)), RING.monomial(new Q(120960), 2)), RING.monomial(new Q(105840), 1)), RING.monomial(new Q(40320), 0)), RING.pow(RING.cos(RING.x(), mN), 2, mN), mN)), RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.zero(), RING.monomial(new Q(196), 6)), RING.monomial(new Q(2352), 5)), RING.monomial(new Q(12600), 4)), RING.monomial(new Q(40320), 3)), RING.monomial(new Q(75600), 2)), RING.monomial(new Q(60480), 1)), RING.monomial(new Q(20160), 0)), RING.sin(RING.x(), mN), mN), RING.monomial(new Q(434), 6)), RING.monomial(new Q(5208), 5)), RING.monomial(new Q(25200), 4)), RING.monomial(new Q(60480), 3)), RING.monomial(new Q(75600), 2)), RING.monomial(new Q(60480), 1)), RING.monomial(new Q(20160), 0)), RING.cos(RING.x(), mN), mN)), RING.multiply(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.zero(), RING.monomial(new Q(298), 7)), RING.monomial(new Q(4172), 6)), RING.monomial(new Q(25200), 5)), RING.monomial(new Q(85680), 4)), RING.monomial(new Q(176400), 3)), RING.monomial(new Q(211680), 2)), RING.monomial(new Q(141120), 1)), RING.monomial(new Q(40320), 0)), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(332), 7)), RING.monomial(new Q(4648), 6)), RING.monomial(new Q(27720), 5)), RING.monomial(new Q(90720), 4)), RING.monomial(new Q(176400), 3)), RING.monomial(new Q(211680), 2)), RING.monomial(new Q(141120), 1)), RING.monomial(new Q(40320), 0)), RING.add(RING.subtract(RING.add(RING.multiply(RING.monomial(new Q(5040), 0), RING.pow(RING.cos(RING.x(), mN), 4, mN), mN), RING.multiply(RING.subtract(RING.multiply(RING.monomial(new Q(20160), 0), RING.sin(RING.x(), mN), mN), RING.monomial(new Q(40320), 0)), RING.pow(RING.cos(RING.x(), mN), 2, mN), mN)), RING.multiply(RING.monomial(new Q(40320), 0), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(40320), 0)), mN);
  }
}
