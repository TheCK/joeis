package irvine.oeis.a302;
// Generated by gen_seq4.pl egfu at 2021-12-04 17:50

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A302898 Number of permutations of [n] having exactly five alternating descents.
 * E.g.f.: (120*cos(x)^3 + (x^5 - 10*x^4 + 60*x^3 - 240*x^2 + 600*x - 120*sin(x) - 360)*cos(x)^2 + ((- 5*x^4 + 40*x^3 - 180*x^2 + 480*x - 240)*sin(x) - 25*x^4 + 200*x^3 - 540*x^2 + 480*x - 240)*cos(x) + (- 13*x^5 + 130*x^4 - 540*x^3 + 1200*x^2 - 1200*x + 480)*sin(x) - 17*x^5 + 170*x^4 - 660*x^3 + 1200*x^2 - 1200*x + 480)/((120*sin(x) - 360)*cos(x)^2 - 480*sin(x) + 480)
 * @author Georg Fischer
 */
public class A302898 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A302898() {
    super(6);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.series(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.add(RING.add(RING.multiply(RING.monomial(new Q(120), 0), RING.pow(RING.cos(RING.x(), n), 3, n), n), RING.multiply(RING.subtract(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.pow(RING.x(), 5, n), RING.monomial(Q.TEN, 4)), RING.monomial(new Q(60), 3)), RING.monomial(new Q(240), 2)), RING.monomial(new Q(600), 1)), RING.multiply(RING.monomial(new Q(120), 0), RING.sin(RING.x(), n), n)), RING.monomial(new Q(360), 0)), RING.pow(RING.cos(RING.x(), n), 2, n), n)), RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.zero(), RING.monomial(Q.FIVE, 4)), RING.monomial(new Q(40), 3)), RING.monomial(new Q(180), 2)), RING.monomial(new Q(480), 1)), RING.monomial(new Q(240), 0)), RING.sin(RING.x(), n), n), RING.monomial(new Q(25), 4)), RING.monomial(new Q(200), 3)), RING.monomial(new Q(540), 2)), RING.monomial(new Q(480), 1)), RING.monomial(new Q(240), 0)), RING.cos(RING.x(), n), n)), RING.multiply(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.zero(), RING.monomial(new Q(13), 5)), RING.monomial(new Q(130), 4)), RING.monomial(new Q(540), 3)), RING.monomial(new Q(1200), 2)), RING.monomial(new Q(1200), 1)), RING.monomial(new Q(480), 0)), RING.sin(RING.x(), n), n)), RING.monomial(new Q(17), 5)), RING.monomial(new Q(170), 4)), RING.monomial(new Q(660), 3)), RING.monomial(new Q(1200), 2)), RING.monomial(new Q(1200), 1)), RING.monomial(new Q(480), 0)), RING.add(RING.subtract(RING.multiply(RING.subtract(RING.multiply(RING.monomial(new Q(120), 0), RING.sin(RING.x(), n), n), RING.monomial(new Q(360), 0)), RING.pow(RING.cos(RING.x(), n), 2, n), n), RING.multiply(RING.monomial(new Q(480), 0), RING.sin(RING.x(), n), n)), RING.monomial(new Q(480), 0)), n);
  }
}
