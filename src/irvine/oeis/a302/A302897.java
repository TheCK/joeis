package irvine.oeis.a302;
// Generated by gen_seq4.pl egfu at 2021-12-04 17:50

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A302897 Number of permutations of [n] having exactly four alternating descents.
 * E.g.f.: ((x^4 - 12*x^3 + 60*x^2 - 168*x + 48*sin(x) + 96)*cos(x)^2 - ((x^3 - 4*x^2 + 12*x - 24)*sin(x) + 5*x^3 - 32*x^2 + 60*x - 24)*x*cos(x) + (- 6*x^4 + 52*x^3 - 168*x^2 + 192*x - 96)*sin(x) - 6*x^4 + 44*x^3 - 120*x^2 + 192*x - 96)/(24*cos(x)^3 + (- 24*sin(x) + 72)*cos(x)^2 + (48*sin(x) - 48)*cos(x) + 96*sin(x) - 96)
 * @author Georg Fischer
 */
public class A302897 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A302897() {
    super(5);
  }

  @Override
  public Polynomial<Q> compute(final int mN) {
    return RING.series(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.multiply(RING.add(RING.add(RING.subtract(RING.add(RING.subtract(RING.pow(RING.x(), 4, mN), RING.monomial(new Q(12), 3)), RING.monomial(new Q(60), 2)), RING.monomial(new Q(168), 1)), RING.multiply(RING.monomial(new Q(48), 0), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(96), 0)), RING.pow(RING.cos(RING.x(), mN), 2, mN), mN), RING.multiply(RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.multiply(RING.subtract(RING.add(RING.subtract(RING.pow(RING.x(), 3, mN), RING.monomial(Q.FOUR, 2)), RING.monomial(new Q(12), 1)), RING.monomial(new Q(24), 0)), RING.sin(RING.x(), mN), mN), RING.monomial(Q.FIVE, 3)), RING.monomial(new Q(32), 2)), RING.monomial(new Q(60), 1)), RING.monomial(new Q(24), 0)), RING.x(), mN), RING.cos(RING.x(), mN), mN)), RING.multiply(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.zero(), RING.monomial(Q.SIX, 4)), RING.monomial(new Q(52), 3)), RING.monomial(new Q(168), 2)), RING.monomial(new Q(192), 1)), RING.monomial(new Q(96), 0)), RING.sin(RING.x(), mN), mN)), RING.monomial(Q.SIX, 4)), RING.monomial(new Q(44), 3)), RING.monomial(new Q(120), 2)), RING.monomial(new Q(192), 1)), RING.monomial(new Q(96), 0)), RING.subtract(RING.add(RING.add(RING.add(RING.multiply(RING.monomial(new Q(24), 0), RING.pow(RING.cos(RING.x(), mN), 3, mN), mN), RING.multiply(RING.add(RING.subtract(RING.zero(), RING.multiply(RING.monomial(new Q(24), 0), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(72), 0)), RING.pow(RING.cos(RING.x(), mN), 2, mN), mN)), RING.multiply(RING.subtract(RING.multiply(RING.monomial(new Q(48), 0), RING.sin(RING.x(), mN), mN), RING.monomial(new Q(48), 0)), RING.cos(RING.x(), mN), mN)), RING.multiply(RING.monomial(new Q(96), 0), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(96), 0)), mN);
  }
}
