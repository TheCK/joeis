package irvine.oeis.a302;
// Generated by gen_seq4.pl egfu at 2021-12-04 17:50

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A302896 Number of permutations of [n] having exactly three alternating descents.
 * E.g.f.: (6*cos(x)^2 + (3*x^2 - 12*x + 6*sin(x) + 6)*cos(x) + (x^3 - 6*x^2 + 18*x - 12)*sin(x) + 2*x^3 - 12*x^2 + 18*x - 12)/(6*cos(x)^2 + 12*sin(x) - 12)
 * @author Georg Fischer
 */
public class A302896 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A302896() {
    super(4);
  }

  @Override
  public Polynomial<Q> compute(final int mN) {
    return RING.series(RING.subtract(RING.add(RING.subtract(RING.add(RING.add(RING.add(RING.multiply(RING.monomial(new Q(6), 0), RING.pow(RING.cos(RING.x(), mN), 2, mN), mN), RING.multiply(RING.add(RING.add(RING.subtract(RING.monomial(new Q(3), 2), RING.monomial(new Q(12), 1)), RING.multiply(RING.monomial(new Q(6), 0), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(6), 0)), RING.cos(RING.x(), mN), mN)), RING.multiply(RING.subtract(RING.add(RING.subtract(RING.pow(RING.x(), 3, mN), RING.monomial(new Q(6), 2)), RING.monomial(new Q(18), 1)), RING.monomial(new Q(12), 0)), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(2), 3)), RING.monomial(new Q(12), 2)), RING.monomial(new Q(18), 1)), RING.monomial(new Q(12), 0)), RING.subtract(RING.add(RING.multiply(RING.monomial(new Q(6), 0), RING.pow(RING.cos(RING.x(), mN), 2, mN), mN), RING.multiply(RING.monomial(new Q(12), 0), RING.sin(RING.x(), mN), mN)), RING.monomial(new Q(12), 0)), mN);
  }
}
