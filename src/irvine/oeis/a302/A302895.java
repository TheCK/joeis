package irvine.oeis.a302;
// Generated by gen_seq4.pl egfu at 2021-12-04 17:50

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A302895 Number of permutations of [n] having exactly two alternating descents.
 * E.g.f.: ((4 + (-2 + x)*x - 4*cos(x))*(1 + cos(x)) + (4 + (-6 + x)*x)*sin(x))/(3 + 2*cos(x) - cos(2*x) - 2*(2 + cos(x))*sin(x))
 * @author Georg Fischer
 */
public class A302895 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A302895() {
    super(3);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.series(RING.add(RING.multiply(RING.subtract(RING.add(RING.monomial(Q.FOUR, 0), RING.multiply(RING.add(RING.negate(RING.monomial(Q.TWO, 0)), RING.x()), RING.x(), n)), RING.multiply(RING.monomial(Q.FOUR, 0), RING.cos(RING.x(), n), n)), RING.add(RING.one(), RING.cos(RING.x(), n)), n), RING.multiply(RING.add(RING.monomial(Q.FOUR, 0), RING.multiply(RING.add(RING.negate(RING.monomial(Q.SIX, 0)), RING.x()), RING.x(), n)), RING.sin(RING.x(), n), n)), RING.subtract(RING.subtract(RING.add(RING.monomial(Q.THREE, 0), RING.multiply(RING.monomial(Q.TWO, 0), RING.cos(RING.x(), n), n)), RING.cos(RING.monomial(Q.TWO, 1), n)), RING.multiply(RING.multiply(RING.monomial(Q.TWO, 0), RING.add(RING.monomial(Q.TWO, 0), RING.cos(RING.x(), n)), n), RING.sin(RING.x(), n), n)), n);
  }
}
