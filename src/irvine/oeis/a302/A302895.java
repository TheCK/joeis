package irvine.oeis.a302;
// Generated by gen_seq4.pl egfu at 2021-12-04 17:50

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A302895 Number of permutations of [n] having exactly two alternating descents.
 * E.g.f.: ((4 + (-2 + x)*x - 4*cos(x))*(1 + cos(x)) + (4 + (-6 + x)*x)*sin(x))/(3 + 2*cos(x) - cos(2*x) - 2*(2 + cos(x))*sin(x))
 * @author Georg Fischer
 */
public class A302895 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A302895() {
    super(3);
  }

  @Override
  public Polynomial<Q> compute(final int mN) {
    return RING.series(RING.add(RING.multiply(RING.subtract(RING.add(RING.monomial(new Q(4), 0), RING.multiply(RING.add(RING.subtract(RING.zero(), RING.monomial(new Q(2), 0)), RING.x()), RING.x(), mN)), RING.multiply(RING.monomial(new Q(4), 0), RING.cos(RING.x(), mN), mN)), RING.add(RING.one(), RING.cos(RING.x(), mN)), mN), RING.multiply(RING.add(RING.monomial(new Q(4), 0), RING.multiply(RING.add(RING.subtract(RING.zero(), RING.monomial(new Q(6), 0)), RING.x()), RING.x(), mN)), RING.sin(RING.x(), mN), mN)), RING.subtract(RING.subtract(RING.add(RING.monomial(new Q(3), 0), RING.multiply(RING.monomial(new Q(2), 0), RING.cos(RING.x(), mN), mN)), RING.cos(RING.monomial(new Q(2), 1), mN)), RING.multiply(RING.multiply(RING.monomial(new Q(2), 0), RING.add(RING.monomial(new Q(2), 0), RING.cos(RING.x(), mN)), mN), RING.sin(RING.x(), mN), mN)), mN);
  }
}
