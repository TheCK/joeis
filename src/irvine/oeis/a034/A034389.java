package irvine.oeis.a034;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.GZIPInputStream;

import irvine.math.z.Z;
import irvine.oeis.Sequence;
import irvine.oeis.a001.A001379;

/**
 * A034389 Multiplicity of highest weight (or singular) vectors associated with character chi_1 of Monster module.
 * @author Sean A. Irvine
 */
public class A034389 implements Sequence {

  private static final Z M = new Z("808017424794512875886459904961710757005754368000000000");
  private static List<Z> getChi() {
    final ArrayList<Z> chi = new ArrayList<>();
    final Sequence chiSeq = new A001379(); // chi_1
    Z s;
    while ((s = chiSeq.next()) != null) {
      chi.add(s);
    }
    return chi;
  }

  private List<Z> newList() {
    final ArrayList<Z> res = new ArrayList<>();
    res.add(Z.ONE);
    res.add(Z.ZERO);
    return res;
  }

  private Map<String, List<Z>> getMoonshine() {
    final Map<String, List<Z>> res = new HashMap<>();
    try (final BufferedReader reader = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("/home/sean/moonshine.dat.gz"))))) {
      String line;
      while ((line = reader.readLine()) != null) {
        final String[] parts = line.split("\\s+");
        final List<Z> lst = res.computeIfAbsent(parts[0], k -> newList());
        lst.add(new Z(parts[2]));
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
    return res;
  }

  private final String[] mClasses = {"1A", "2A", "2B", "3A", "3B", "3C", "4A", "4B", "4C", "4D", "5A", "5B", "6A", "6B", "6C", "6D", "6E", "6F", "7A", "7B", "8A", "8B", "8C", "8D", "8E", "8F", "9A", "9B", "10A", "10B", "10C", "10D", "10E", "11A", "12A", "12B", "12C", "12D", "12E", "12F", "12G", "12H", "12I", "12J", "13A", "13B", "14A", "14B", "14C", "15A", "15B", "15C", "15D", "16A", "16B", "16C", "17A", "18A", "18B", "18C", "18D", "18E", "19A", "20A", "20B", "20C", "20D", "20E", "20F", "21A", "21B", "21C", "21D", "22A", "22B", "23AB", "23AB", "24A", "24B", "24C", "24D", "24E", "24F", "24G", "24H", "24I", "24J", "25A", "26A", "26B", "27A", "27B", "28A", "28B", "28C", "28D", "29A", "30A", "30B", "30C", "30D", "30E", "30F", "30G", "31AB", "31AB", "32A", "32B", "33A", "33B", "34A", "35A", "35B", "36A", "36B", "36C", "36D", "38A", "39A", "39B", "39CD", "39CD", "40A", "40B", "40CD", "40CD", "41A", "42A", "42B", "42C", "42D", "44AB", "44AB", "45A", "46AB", "46AB", "46CD", "46CD", "47AB", "47AB", "48A", "50A", "51A", "52A", "52B", "54A", "55A", "56A", "56BC", "56BC", "57A", "59AB", "59AB", "60A", "60B", "60C", "60D", "60E", "60F", "62AB", "62AB", "66A", "66B", "68A", "69AB", "69AB", "70A", "70B", "71AB", "71AB", "78A", "78BC", "78BC", "84A", "84B", "84C", "87AB", "87AB", "88AB", "88AB", "92AB", "92AB", "93AB", "93AB", "94AB", "94AB", "95AB", "95AB", "104AB", "104AB", "105A", "110A", "119AB", "119AB"};

  private static final Z N[] = {
    new Z("2331309585756753201600"),
    new Z("11841091337275200"),
    new Z("437868837806400"),
    new Z("467584848090400"),
    new Z("38732026132800"),
    new Z("20350725595200"),
    new Z("87358471200"),
    new Z("7820482269600"),
    new Z("18526958049600"),
    new Z("222987885120"),
    new Z("8490081600"),
    new Z("19445025600"),
    new Z("9958865716800"),
    new Z("73513400"),
    new Z("2244077793757800"),
    new Z("3749442460305984"),
    new Z("3749442460305984"),
    new Z("726818400"),
    new Z("9182927033280"),
    new Z("35703027360"),
    new Z("98066928960"),
    new Z("22789166400"),
    new Z("451392480"),
    new Z("295495200"),
    new Z("253955520"),
    new Z("479256378753600"),
    new Z("479256378753600"),
    new Z("27003936960"),
    new Z("81995760"),
    new Z("69618669120"),
    new Z("21416915520"),
    new Z("214885440"),
    new Z("2882880"),
    new Z("332640"),
    new Z("786240"),
    new Z("11147099040"),
    new Z("331962190560"),
    new Z("333637920"),
    new Z("845013600"),
    new Z("845013600"),
    new Z("16676856385200"),
    new Z("16676856385200"),
    new Z("186902100"),
    new Z("46955594400"),
    new Z("46955594400"),
    new Z("54880846020"),
    new Z("105386400"),
    new Z("105386400"),
    new Z("49584815280"),
    new Z("6404580"),
    new Z("12916800"),
    new Z("646027200"),
    new Z("228731328"),
    new Z("228731328"),
    new Z("19044013248"),
    new Z("10944013248"),
    new Z("25077360"),
    new Z("198918720"),
    new Z("19433872080"),
    new Z("19433872080"),
    new Z("2784600"),
    new Z("245044800"),
    new Z("57266969760"),
    new Z("157477320"),
    new Z("818809200"),
    new Z("263877213600"),
    new Z("1588466880"),
    new Z("33005280"),
    new Z("937440"),
    new Z("32864832"),
    new Z("182584514112"),
    new Z("182584514112"),
    new Z("982080"),
    new Z("33542208"),
    new Z("33542208"),
    new Z("7650720"),
    new Z("931170240"),
    new Z("33754921200"),
    new Z("42325920"),
    new Z("4969440"),
    new Z("63126554400"),
    new Z("63126554400"),
    new Z("208304928"),
    new Z("208304928"),
    new Z("704223936"),
    new Z("704223936"),
    new Z("1235520"),
    new Z("3967200"),
    new Z("11737440"),
    new Z("11737440"),
    new Z("2542811040"),
    new Z("22102080"),
    new Z("1441440"),
    new Z("879840"),
    new Z("16576560"),
    new Z("21677040"),
    new Z("5267201940"),
    new Z("7900200"),
    new Z("1660401600"),
    new Z("1660401600"),
    new Z("932769600"),
    new Z("7601451872175"),
    new Z("7601451872175"),
    new Z("6511680"),
    new Z("5844589984800"),
    new Z("5844589984800"),
    new Z("2434219200"),
    new Z("2434219200"),
    new Z("280800"),
    new Z("947520"),
    new Z("1016747424"),
    new Z("386100"),
    new Z("6568800"),
    new Z("1374912"),
    new Z("151200"),
    new Z("92400"),
    new Z("411840"),
    new Z("19562400"),
    new Z("12524852340"),
    new Z("41801760"),
    new Z("75698280"),
    new Z("8148853440"),
    new Z("864175548600"),
    new Z("3456702194400"),
    new Z("3456702194400"),
    new Z("119700"),
    new Z("13695552"),
    new Z("752016096"),
    new Z("752016096"),
    new Z("19320840"),
    new Z("1004683680"),
    new Z("164160"),
    new Z("14379596431200"),
    new Z("14208480"),
    new Z("497653200"),
    new Z("497653200"),
    new Z("995276700"),
    new Z("5109369408"),
    new Z("514080"),
    new Z("59017104226080"),
    new Z("1151710560"),
    new Z("3767400"),
    new Z("7600320"),
    new Z("11823840"),
    new Z("8558550"),
    new Z("664020"),
    new Z("4320"),
    new Z("655188534"),
    new Z("102240"),
    new Z("157248"),
    new Z("26489342880"),
    new Z("93276960"),
    new Z("13137600"),
    new Z("428400"),
    new Z("18221280"),
    new Z("190072512"),
    new Z("21176100"),
    new Z("37130940"),
    new Z("852390"),
    new Z("184363200"),
    new Z("108803771818560"),
    new Z("1657656"),
    new Z("345290400"),
    new Z("90014400"),
    new Z("30240"),
    new Z("4032"),
    new Z("4062240"),
    new Z("3204801600"),
    new Z("24196995900"),
    new Z("668304"),
    new Z("73920"),
    new Z("6983776800"),
    new Z("32959080"),
    new Z("3115200"),
    new Z("48163383908640"),
    new Z("427211200"),
    new Z("858816"),
    new Z("21416915520"),
    new Z("14400"),
    new Z("14400"),
    new Z("154881891350"),
    new Z("2009280"),
    new Z("6339168"),
    new Z("26429760"),
    new Z("32730048"),
    new Z("7425600"),
    new Z("8237275200"),
    new Z("15120"),
    new Z("54774720"),
    new Z("27989280"),
    new Z("34272"),
    new Z("3500640"),
    new Z("1049200425"),
    new Z("1404480"),
  };

  private static final Z[] CM = {
    new Z("808017424794512875886459904961710757005754368000000000"),
    new Z("8309562962452852382355161088000000"),
    new Z("139511839126336328171520000"),
    new Z("3765617127571985163878400"),
    new Z("1429615077540249600"),
    new Z("272237831663616000"),
    new Z("8317584273309696000"),
    new Z("26489012826931200"),
    new Z("48704929136640"),
    new Z("8244323942400"),
    new Z("1365154560000000"),
    new Z("94500000000"),
    new Z("774741019852800"),
    new Z("2690072985600"),
    new Z("481579499520"),
    new Z("130606940160"),
    new Z("1612431360"),
    new Z("278691840"),
    new Z("28212710400"),
    new Z("84707280"),
    new Z("792723456"),
    new Z("778567680"),
    new Z("143769600"),
    new Z("23592960"),
    new Z("12582912"),
    new Z("3096576"),
    new Z("56687040"),
    new Z("2834352"),
    new Z("887040000"),
    new Z("18432000"),
    new Z("12000000"),
    new Z("6048000"),
    new Z("480000"),
    new Z("1045440"),
    new Z("119439360"),
    new Z("22394880"),
    new Z("17418240"),
    new Z("1161216"),
    new Z("884736"),
    new Z("483840"),
    new Z("373248"),
    new Z("276480"),
    new Z("82944"),
    new Z("23040"),
    new Z("73008"),
    new Z("52728"),
    new Z("1128960"),
    new Z("150528"),
    new Z("35280"),
    new Z("2721600"),
    new Z("145800"),
    new Z("10800"),
    new Z("9000"),
    new Z("12288"),
    new Z("8192"),
    new Z("8192"),
    new Z("2856"),
    new Z("34992"),
    new Z("23328"),
    new Z("15552"),
    new Z("3888"),
    new Z("3888"),
    new Z("1140"),
    new Z("76800"),
    new Z("28800"),
    new Z("24000"),
    new Z("19200"),
    new Z("1200"),
    new Z("960"),
    new Z("52920"),
    new Z("6174"),
    new Z("3528"),
    new Z("504"),
    new Z("2640"),
    new Z("2112"),
    new Z("552"),
    new Z("552"),
    new Z("6912"),
    new Z("4608"),
    new Z("3456"),
    new Z("2304"),
    new Z("1152"),
    new Z("864"),
    new Z("864"),
    new Z("576"),
    new Z("384"),
    new Z("288"),
    new Z("250"),
    new Z("624"),
    new Z("312"),
    new Z("486"),
    new Z("243"),
    new Z("4704"),
    new Z("2688"),
    new Z("896"),
    new Z("168"),
    new Z("87"),
    new Z("10800"),
    new Z("7200"),
    new Z("2880"),
    new Z("1800"),
    new Z("360"),
    new Z("240"),
    new Z("240"),
    new Z("186"),
    new Z("186"),
    new Z("128"),
    new Z("128"),
    new Z("594"),
    new Z("396"),
    new Z("136"),
    new Z("2100"),
    new Z("70"),
    new Z("1296"),
    new Z("648"),
    new Z("216"),
    new Z("72"),
    new Z("76"),
    new Z("702"),
    new Z("117"),
    new Z("78"),
    new Z("78"),
    new Z("400"),
    new Z("320"),
    new Z("80"),
    new Z("80"),
    new Z("41"),
    new Z("504"),
    new Z("504"),
    new Z("168"),
    new Z("126"),
    new Z("352"),
    new Z("352"),
    new Z("135"),
    new Z("184"),
    new Z("184"),
    new Z("92"),
    new Z("92"),
    new Z("94"),
    new Z("94"),
    new Z("96"),
    new Z("50"),
    new Z("51"),
    new Z("104"),
    new Z("52"),
    new Z("54"),
    new Z("110"),
    new Z("112"),
    new Z("56"),
    new Z("56"),
    new Z("57"),
    new Z("59"),
    new Z("59"),
    new Z("360"),
    new Z("240"),
    new Z("120"),
    new Z("120"),
    new Z("60"),
    new Z("60"),
    new Z("62"),
    new Z("62"),
    new Z("132"),
    new Z("66"),
    new Z("68"),
    new Z("69"),
    new Z("69"),
    new Z("140"),
    new Z("70"),
    new Z("71"),
    new Z("71"),
    new Z("78"),
    new Z("78"),
    new Z("78"),
    new Z("84"),
    new Z("84"),
    new Z("84"),
    new Z("87"),
    new Z("87"),
    new Z("88"),
    new Z("88"),
    new Z("92"),
    new Z("92"),
    new Z("93"),
    new Z("93"),
    new Z("94"),
    new Z("94"),
    new Z("95"),
    new Z("95"),
    new Z("104"),
    new Z("104"),
    new Z("105"),
    new Z("110"),
    new Z("119"),
    new Z("119"),
  };

  private final List<Z> mChi = getChi();
  private final Map<String, List<Z>> mMoonshine = getMoonshine();
  //private final Sequence mT = new A014708();
  private int mN = -1;

  @Override
  public Z next() {
    assert mClasses.length == 194;
    assert N.length == 194;
    assert CM.length == 194;
    if (++mN == 21) {
      return null;
    }
    // chi1 = [1,1,1,...,1]
    Z r = Z.ZERO;
    int j = 0;
    for (final String s : mClasses) {
      r = r.add(M.divide(CM[j++]).multiply(mMoonshine.get(s).get(mN)));
      //r = r.add(N[j].multiply(mChi.get(j++)).multiply(mMoonshine.get(s).get(mN)));
      //r = r.add(mChi.get(j++).multiply(mMoonshine.get(s).get(mN)));
      //r = r.add(mMoonshine.get(s).get(mN));
    }
//    if (!Z.ZERO.equals(r.mod(M))) {
//      System.out.println("Nope: " + r);
//    }
    System.out.println(mN + " " + r + " " + r.divide(M));
    return r;
  }
}
