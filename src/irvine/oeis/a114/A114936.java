package irvine.oeis.a114;
// Generated by gen_seq4.pl egfu at 2021-12-06 15:00

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A114936 Number of connected (4,n)-hypergraphs (without empty edges).
 * E.g.f.: (1/24)*(exp(15*x) - 4*exp(8*x) + 6*exp(7*x) - 3*exp(6*x) + 12*exp(5*x) - 24*exp(4*x) + 23*exp(3*x) - 11*exp(2*x) + 6*exp(x) - 6)
 * @author Georg Fischer
 */
public class A114936 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A114936() {
    super(0);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.multiply(RING.series(RING.one(), RING.monomial(new Q(24), 0), n), RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.add(RING.subtract(RING.exp(RING.monomial(new Q(15), 1), n), RING.multiply(RING.monomial(Q.FOUR, 0), RING.exp(RING.monomial(Q.EIGHT, 1), n), n)), RING.multiply(RING.monomial(Q.SIX, 0), RING.exp(RING.monomial(Q.SEVEN, 1), n), n)), RING.multiply(RING.monomial(Q.THREE, 0), RING.exp(RING.monomial(Q.SIX, 1), n), n)), RING.multiply(RING.monomial(new Q(12), 0), RING.exp(RING.monomial(Q.FIVE, 1), n), n)), RING.multiply(RING.monomial(new Q(24), 0), RING.exp(RING.monomial(Q.FOUR, 1), n), n)), RING.multiply(RING.monomial(new Q(23), 0), RING.exp(RING.monomial(Q.THREE, 1), n), n)), RING.multiply(RING.monomial(new Q(11), 0), RING.exp(RING.monomial(Q.TWO, 1), n), n)), RING.multiply(RING.monomial(Q.SIX, 0), RING.exp(RING.x(), n), n)), RING.monomial(Q.SIX, 0)), n);
  }
}
