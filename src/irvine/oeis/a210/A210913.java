package irvine.oeis.a210;
// Generated by gen_seq4.pl egfu at 2021-12-07 21:31

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A210913 Number of transitive reflexive early confluent binary relations R on n labeled elements where |{y : xRy}| &lt;= 5 for all x.
 * E.g.f.: 0
 * @author Georg Fischer
 */
public class A210913 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A210913() {
    super(0);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.exp(RING.add(RING.add(RING.add(RING.add(RING.multiply(RING.x(), RING.exp(RING.add(RING.add(RING.add(RING.multiply(RING.x(), RING.exp(RING.add(RING.add(RING.multiply(RING.x(), RING.exp(RING.add(RING.multiply(RING.x(), RING.exp(RING.x(), n), n), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n)), n), n), RING.multiply(RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n), RING.exp(RING.x(), n), n)), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(6), 0), n), RING.pow(RING.x(), 3, n), n)), n), n), RING.multiply(RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n), RING.exp(RING.add(RING.multiply(RING.x(), RING.exp(RING.x(), n), n), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n)), n), n)), RING.multiply(RING.multiply(RING.series(RING.one(), RING.monomial(new Q(6), 0), n), RING.pow(RING.x(), 3, n), n), RING.exp(RING.x(), n), n)), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(24), 0), n), RING.pow(RING.x(), 4, n), n)), n), n), RING.multiply(RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n), RING.exp(RING.add(RING.add(RING.multiply(RING.x(), RING.exp(RING.add(RING.multiply(RING.x(), RING.exp(RING.x(), n), n), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n)), n), n), RING.multiply(RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n), RING.exp(RING.x(), n), n)), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(6), 0), n), RING.pow(RING.x(), 3, n), n)), n), n)), RING.multiply(RING.multiply(RING.series(RING.one(), RING.monomial(new Q(6), 0), n), RING.pow(RING.x(), 3, n), n), RING.exp(RING.add(RING.multiply(RING.x(), RING.exp(RING.x(), n), n), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(2), 0), n), RING.pow(RING.x(), 2, n), n)), n), n)), RING.multiply(RING.multiply(RING.series(RING.one(), RING.monomial(new Q(24), 0), n), RING.pow(RING.x(), 4, n), n), RING.exp(RING.x(), n), n)), RING.multiply(RING.series(RING.one(), RING.monomial(new Q(120), 0), n), RING.pow(RING.x(), 5, n), n)), n);
  }
}
