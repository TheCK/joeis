package irvine.oeis;

import irvine.math.group.IntegerField;
import irvine.math.group.PolynomialRingField;
import irvine.math.polynomial.Polynomial;
import irvine.math.z.Z;

/**
 * A sequence generated by the ratio of polynomials with integer coefficients.
 * @author Sean A. Irvine
 */
public class RatPolyGfSequence implements Sequence {

  protected static final PolynomialRingField<Z> RING = new PolynomialRingField<>(IntegerField.SINGLETON);
  private final Polynomial<Z> mNum;
  private final Polynomial<Z> mDen;
  private Polynomial<Z> mGf;
  private int mM = 1;
  private int mN = -1;

  /**
   * Construct a new rational integer polynomial generating function sequence.
   * @param num numerator
   * @param den denominator
   */
  public RatPolyGfSequence(final Polynomial<Z> num, final Polynomial<Z> den) {
    mNum = num;
    mDen = den;
    mGf = RING.series(mNum, mDen, mM);
  }

  /**
   * Construct a new rational integer polynomial generating function sequence.
   * @param num numerator
   * @param den denominator
   */
  public RatPolyGfSequence(final long[] num, final long[] den) {
    this(Polynomial.create(num), Polynomial.create(den));
  }

  /**
   * Construct a new rational integer polynomial generating function sequence.
   * @param num numerator
   * @param den denominator
   */
  public RatPolyGfSequence(final Z[] num, final Z[] den) {
    this(Polynomial.create(num), Polynomial.create(den));
  }

  @Override
  public Z next() {
    if (++mN > mM) {
      mM *= 2;
      mGf = RING.series(mNum, mDen, mM);
    }
    return mGf.coeff(mN);
  }
}

