package irvine.oeis.a244;
// Generated by gen_seq4.pl dexcr CR.ONE.add(CR.valueOf(22).divide(CR.valueOf(60))).add(CR.valueOf(7).divide(REALS.pow(CR.valueOf(60), CR.TWO))).add(CR.valueOf(42).divide(REALS.pow(CR.valueOf(60), CR.THREE))).add(CR.valueOf(33).divide(REALS.pow(CR.valueOf(60), CR.FOUR))).add(CR.FOUR.divide(REALS.pow(CR.valueOf(60), CR.FIVE))).add(CR.valueOf(40).divide(REALS.pow(CR.valueOf(60), CR.valueOf(6)))) true 10 at 2020-04-05 12:17
// DO NOT EDIT here!

import irvine.math.cr.CR;
import irvine.math.cr.ComputableReals;
import irvine.oeis.DecimalExpansionSequence;

/**
 * A244467 Decimal expansion of <code>1 + 22/60 + 7/60^2 + 42/60^3 + 33/60^4 + 4/60^5 + 40/60^6</code>, Fibonacci's solution to <code>x^3 + 2x^2 + 10x = 20</code>.
 * @author Georg Fischer
 */
public class A244467 extends DecimalExpansionSequence {

  private static final ComputableReals REALS = ComputableReals.SINGLETON;
  private static final CR N = CR.ONE.add(CR.valueOf(22).divide(CR.valueOf(60))).add(CR.valueOf(7).divide(REALS.pow(CR.valueOf(60), CR.TWO))).add(CR.valueOf(42).divide(REALS.pow(CR.valueOf(60), CR.THREE))).add(CR.valueOf(33).divide(REALS.pow(CR.valueOf(60), CR.FOUR))).add(CR.FOUR.divide(REALS.pow(CR.valueOf(60), CR.FIVE))).add(CR.valueOf(40).divide(REALS.pow(CR.valueOf(60), CR.valueOf(6))));

  @Override
  protected CR getCR() {
    return N;
  }
}
