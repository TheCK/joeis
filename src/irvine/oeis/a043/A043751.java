package irvine.oeis.a043;
// Generated by gen_seq4.pl basrunmod 2 5 8 at 2019-06-28 18:03
// DO NOT EDIT here!

import irvine.math.z.Z;
import irvine.oeis.Sequence;

/**
 * A043751 Numbers n such that number of runs in the base 2 representation of n is congruent to 5 mod 8.
 * @author Georg Fischer
 */
public class A043751 implements Sequence {

  private Z mN;
  private String mDigits;
  private int mIncr;

  /** Construct the sequence. */
  public A043751() {
    mN = Z.valueOf(1);
    advance(5, 2);
  }

  protected void advance(final int len, final int base) {
    if (base <= 10) {
      mIncr = 1;
      mDigits = mN.toString(base);
      while (mDigits.length() < len) {
        mN = mN.add(1);
        mDigits = mN.toString(base);
      }
    } else {
      mIncr = 2;
      final int len2 = len * 2;
      mDigits = mN.toTwoDigits(base);
      if ((mDigits.length() & 1) != 0) {
        mDigits = "0" + mDigits;
      }
      while (mDigits.length() < len2) {
        mN = mN.add(1);
        mDigits = mN.toTwoDigits(base);
        if ((mDigits.length() & 1) != 0) {
          mDigits = "0" + mDigits;
        }
      }
    }
  }

  protected int runCount(final Z an, final int base) {
    if (base <= 10) {
      mIncr = 1;
      mDigits = mN.toString(base);
    } else {
      mIncr = 2;
      mDigits = mN.toTwoDigits(base);
      if ((mDigits.length() & 1) != 0) {
        mDigits = "0" + mDigits;
      }
    }
    int idig = mDigits.length() - mIncr;
    int count = 1;
    String runElem = mDigits.substring(idig, idig + mIncr);
    idig -= mIncr;
    while (idig >= 0) {
      if (!mDigits.substring(idig, idig + mIncr).equals(runElem)) {
        count++;
        runElem = mDigits.substring(idig, idig + mIncr);
      }
      idig -= mIncr;
    }
    return count;
  }

  @Override
  public Z next() {
    while (runCount(mN, 2) % 8 != 5) {
      mN = mN.add(1);
    }
    final Z result = mN;
    mN = mN.add(1);
    return result;
  }
}
